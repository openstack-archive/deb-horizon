Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 horizon (2:9.0.0~b2+2016.02.18.git.cda9604792-1) experimental; urgency=medium
 .
   * New upstream release, based on commit cda9604792.
   * Fixed (build-)depends for this release.
   * Added patch: Provide_2_simple_methods_to_check_for_disabled_panels.patch
   * Added patch: 0100-add-openstack_auth-in-INSTALLED_APPS.patch
   * Added patch: 0090-explicitly-declare-app_label.patch
   * Added patch: Fix_remaining_Django_1.9_test_failures.patch
   * Added patch: Only_import_selenium_if_WITH_SELENIUM_is_set.patch
Author: Thomas Goirand <zigo@debian.org>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: <YYYY-MM-DD>

--- horizon-9.0.0~b2+2016.02.18.git.cda9604792.orig/horizon/test/webdriver.py
+++ horizon-9.0.0~b2+2016.02.18.git.cda9604792/horizon/test/webdriver.py
@@ -45,21 +45,21 @@ if with_sel:
         desired_capabilities = dc.DesiredCapabilities.FIREFOX
 
 
-class WrapperFindOverride(object):
-    """Mixin for overriding find_element methods."""
+    class WrapperFindOverride(object):
+        """Mixin for overriding find_element methods."""
 
-    def find_element(self, by=by.By.ID, value=None):
-        web_el = super(WrapperFindOverride, self).find_element(by, value)
-        return WebElementWrapper(web_el.parent, web_el.id, (by, value),
-                                 self)
-
-    def find_elements(self, by=by.By.ID, value=None):
-        web_els = super(WrapperFindOverride, self).find_elements(by, value)
-        result = []
-        for index, web_el in enumerate(web_els):
-            result.append(WebElementWrapper(web_el.parent, web_el.id,
-                                            (by, value), self, index))
-        return result
+        def find_element(self, by=by.By.ID, value=None):
+            web_el = super(WrapperFindOverride, self).find_element(by, value)
+            return WebElementWrapper(web_el.parent, web_el.id, (by, value),
+                                     self)
+
+        def find_elements(self, by=by.By.ID, value=None):
+            web_els = super(WrapperFindOverride, self).find_elements(by, value)
+            result = []
+            for index, web_el in enumerate(web_els):
+                result.append(WebElementWrapper(web_el.parent, web_el.id,
+                                                (by, value), self, index))
+            return result
 
 
 class WebElementWrapper(WrapperFindOverride, webelement.WebElement):
