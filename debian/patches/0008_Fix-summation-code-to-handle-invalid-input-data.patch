Description: Fix summation code to handle invalid input data
 This commit fixes multiple test failures with Django 1.7 that all ended with
 this:
 .
  File "/usr/lib/python2.7/dist-packages/django/template/base.py", line 734, in resolve
    value = self._resolve_lookup(context)
  File "/usr/lib/python2.7/dist-packages/django/template/base.py", line 788, in _resolve_lookup
    current = current()
  File "/home/rhertzog/tmp/django17/horizon/horizon/tables/base.py", line 404, in get_summation
    summation = summation_function(data)
  File "/home/rhertzog/tmp/django17/horizon/horizon/tables/base.py", line 206, in <lambda>
    "average": lambda data: sum(data, 0.0) / len(data)
 TypeError: unsupported operand type(s) for +: 'float' and 'str'
 .
 With Django 1.6, the template code that looked up the variable behind
 get_summation was catching the TypeError exception:
 .
    try: # method call (assuming no args required)
	current = current()
    except TypeError: # arguments *were* required
	# GOTCHA: This will also catch any TypeError
	# raised in the function itself.
	current = settings.TEMPLATE_STRING_IF_INVALID  # invalid method call
 .
 With Django 1.7, the code has been refined to catch the exception only when
 the function really requires argument (which get_summation() doesn't):
 .
    try:  # method call (assuming no args required)
	current = current()
    except TypeError:
	try:
	    getcallargs(current)
	except TypeError:  # arguments *were* required
	    current = settings.TEMPLATE_STRING_IF_INVALID  # invalid method call
	else:
	    raise
 .
 So instead of blindly relying on sum(), I introduced a safe_sum() and safe_average()
 functions which mimick the behaviour we got with Django 1.6 by returning an empty
 string when we have invalid input data.
Author: Raphael Hertzog <hertzog@debian.org>
Date: Mon, 4 Aug 2014 22:27:51 +0200

diff --git a/horizon/tables/base.py b/horizon/tables/base.py
index 10aaa98..63dc087 100644
--- a/horizon/tables/base.py
+++ b/horizon/tables/base.py
@@ -49,6 +49,28 @@ PALETTE = termcolors.PALETTES[termcolors.DEFAULT_PALETTE]
 STRING_SEPARATOR = "__"
 
 
+def safe_sum(data):
+    """
+    Returns a sum when we have an iterable of numbers, an empty
+    string otherwise.
+    """
+    try:
+        return sum(data)
+    except TypeError:
+        return ''
+
+
+def safe_average(data):
+    """
+    Returns the average when we have an interable of numbers,
+    an empty string otherwise.
+    """
+    try:
+        return sum(data, 0.0) / len(data)
+    except (TypeError, ZeroDivisionError):
+        return ''
+
+
 class Column(html.HTMLElement):
     """A class which represents a single column in a :class:`.DataTable`.
 
@@ -202,8 +224,8 @@ class Column(html.HTMLElement):
         Defaults to ``None``.
     """
     summation_methods = {
-        "sum": sum,
-        "average": lambda data: sum(data, 0.0) / len(data)
+        "sum": safe_sum,
+        "average": safe_average
     }
     # Used to retain order when instantiating columns on a table
     creation_counter = 0
-- 
2.0.1

